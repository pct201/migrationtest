using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Collections.Generic;
using System.IO;

public partial class Claim_OtherVehicleInfo : System.Web.UI.Page
{
    #region Private Variables
    public RIMS_Base.Biz.CLiabilityClaimOtherVehInfo m_objOtherVehInfo;
    public RIMS_Base.Biz.CGeneral objGeneral;
    int m_intRetval = -1;
    List<RIMS_Base.CLiabilityClaimOtherVehInfo> lstVehInfo;

    public string m_strCustomFileName = string.Empty;
    public string m_strFileName = string.Empty;
    public string m_strGlobalPath = string.Empty;
    public string m_strPath = string.Empty;
    public string m_strFolderName = "OtherVehicle";
    public RIMS_Base.Biz.CAttachment m_objAttachment;
    List<RIMS_Base.CAttachment> lstAttachment = null;
    int Attach_Retval = -1;
    RIMS_Base.Biz.CLiabilityClaim_FCI objLiability;
    List<RIMS_Base.CLiabilityClaim_FCI> lstLiability;
    #endregion
    protected void Page_Load(object sender, EventArgs e)
    {
        txtzipcode.Attributes.Add("onKeyUp", "return ZipMasking(event,this.value,this);");
        txtzipcode.Attributes.Add("onKeyPress", "return CheckNum(this);");

        txtyear.Attributes.Add("onKeyPress", "isValid(this)");
        txtyear.Attributes.Add("onfocusout", "YearValidate(this.id)");
       // txtzipcode.Attributes.Add("onKeyPress", "isValidzip(this)");
        m_strGlobalPath = Page.ResolveUrl(ConfigurationManager.AppSettings["UploadPath"] + "/" + m_strFolderName + "/");
        if (!IsPostBack)
        {
            BindCombo();

            gvAttachmentDetails.DataSource = BindAttachmentDetails();
            gvAttachmentDetails.DataBind();


            btnRemove.Attributes.Add("onclick", "return OMSCheckSelected1('chkItem','gvAttachmentDetails','Delete');");
           
            if (Request.QueryString.Count > 0)
            {
                if (Request.QueryString["LiabilityID"] != string.Empty)
                {
                    Session["WitnessId"] = Request.QueryString["LiabilityID"].ToString();
                    ViewState["Pk_Id"] = Request.QueryString["LiabilityID"].ToString();
                    RetriveData();
                }
            }


         


        }
    }
    protected void btnsave_Click(object sender, EventArgs e)
    {

        InsertUpdateData();
        Response.Redirect("../Claim/AutoLiability.aspx?Page=Vehicle");
    }
    protected void btnCancel_Click(object sender, EventArgs e)
    {
        Response.Redirect("../Claim/AutoLiability.aspx?Page=Vehicle");
    }

    
    #region Private Methods
    private void BindCombo()
    {
        objGeneral = new RIMS_Base.Biz.CGeneral();
        dwstateowner.DataSource = objGeneral.GetAllState();
        dwstateowner.DataTextField = "FLD_state";
        dwstateowner.DataValueField = "Code";
        dwstateowner.DataBind();
        ListItem lstItem = new ListItem("------------Select------------", "0");
        dwstateowner.Items.Insert(0, lstItem);

        dwLicensePlateState.DataSource = objGeneral.GetAllState();
        dwLicensePlateState.DataTextField = "FLD_state";
        dwLicensePlateState.DataValueField = "Code";
        dwLicensePlateState.DataBind();
        ListItem lstItemPlateState = new ListItem("------------Select------------", "0");
        dwLicensePlateState.Items.Insert(0, lstItemPlateState);

    }
    private void RetriveData()
    {
        m_objOtherVehInfo = new RIMS_Base.Biz.CLiabilityClaimOtherVehInfo();
        lstVehInfo = new List<RIMS_Base.CLiabilityClaimOtherVehInfo>();
        Int32 LiabilityClaimid = Convert.ToInt32(Session["WitnessId"].ToString());
        lstVehInfo = m_objOtherVehInfo.Get_Claim_OtherVehInfoByID(LiabilityClaimid);

        try
        {
            if (lstVehInfo.Count != 0)
            {
                if (lstVehInfo[0].Owner_Name != String.Empty)
                    txtowner.Text = lstVehInfo[0].Owner_Name;

                if (lstVehInfo[0].Owner_Address1 != String.Empty)
                    txtAddLine1.Text = lstVehInfo[0].Owner_Address1;

                if (lstVehInfo[0].Owner_Address2 != String.Empty)
                    txtAddLine2.Text = lstVehInfo[0].Owner_Address2;

                if (lstVehInfo[0].Owner_City != String.Empty)
                    txtcity.Text = lstVehInfo[0].Owner_City;


                if (lstVehInfo[0].FK_Owner_State != null)
                    dwstateowner.SelectedIndex = dwstateowner.Items.IndexOf(dwstateowner.Items.FindByValue(lstVehInfo[0].FK_Owner_State.ToString()));

                if (lstVehInfo[0].Owner_Zipcode != String.Empty)
                    txtzipcode.Text = lstVehInfo[0].Owner_Zipcode;

                if (lstVehInfo[0].Owner_Telephone != String.Empty)
                    txthomephone.Text = lstVehInfo[0].Owner_Telephone;


                if (lstVehInfo[0].Insurance_Carrier != String.Empty)
                    txtinsuname.Text = lstVehInfo[0].Insurance_Carrier;

                if (lstVehInfo[0].Insurance_Telephone != String.Empty)
                    txtInsuTelNo.Text = lstVehInfo[0].Insurance_Telephone;

                if (lstVehInfo[0].Insurance_Agent_Name != String.Empty)
                    txtinsuAgentName.Text = lstVehInfo[0].Insurance_Agent_Name;

                if (lstVehInfo[0].Insurance_Agent_Telephone != String.Empty)
                    txtInsuAgentTelNo.Text = lstVehInfo[0].Insurance_Agent_Telephone;

                if (lstVehInfo[0].Policy_Number != String.Empty)
                    txtpolicyNo.Text = lstVehInfo[0].Policy_Number;

                if (lstVehInfo[0].Vehicle_Year != String.Empty)
                    txtyear.Text = lstVehInfo[0].Vehicle_Year;

                if (lstVehInfo[0].Vehicle_Make != String.Empty)
                    txtMake.Text = lstVehInfo[0].Vehicle_Make;

                if (lstVehInfo[0].Vehicle_Model != String.Empty)
                    txtmodel.Text = lstVehInfo[0].Vehicle_Model;

                if (lstVehInfo[0].Vehicle_VIN != String.Empty)
                    txtVIN.Text = lstVehInfo[0].Vehicle_VIN;

                if (lstVehInfo[0].Vehicle_Plate_Number != String.Empty)
                    txtLicensePlateNo.Text = lstVehInfo[0].Vehicle_Plate_Number;

                if (lstVehInfo[0].FK_Vehicle_State != null)
                    dwLicensePlateState.SelectedIndex = dwLicensePlateState.Items.IndexOf(dwstateowner.Items.FindByValue(lstVehInfo[0].FK_Vehicle_State.ToString()));

                if (lstVehInfo[0].Vehicle_Color != String.Empty)
                    txtVehColor.Text = lstVehInfo[0].Vehicle_Color;

                if (lstVehInfo[0].Desc_Damage != String.Empty)
                    txtDescDmgtoCompany.Text = lstVehInfo[0].Desc_Damage;


                lstAttachment = BindAttachmentDetails();
                if (lstAttachment.Count > 0)
                {
                    gvAttachmentDetails.DataSource = lstAttachment;
                    gvAttachmentDetails.DataBind();

                    btnRemove.Visible = true;
                    btnMail.Visible = true;
                    dvAttachDetails.Style["display"] = "block";
                }

            }

        }
        catch (Exception Ex)
        {
            throw Ex;
        }

    }

    private void InsertUpdateData()
    {
        try
        {

            m_objOtherVehInfo = new RIMS_Base.Biz.CLiabilityClaimOtherVehInfo();

            //if (Session["WorkerCompID"] != null && Session["WorkerCompID"].ToString() != String.Empty)
            //{
            //    m_objOtherVehInfo.FK_Liability_Claim = Convert.ToInt32(Session["WorkerCompID"].ToString());

            //}

            if (ViewState["Pk_Id"] != null && ViewState["Pk_Id"].ToString() != String.Empty)
            {
                m_objOtherVehInfo.Pk_OtherVehicle = Convert.ToInt32(ViewState["Pk_Id"].ToString());
                m_objOtherVehInfo.Updated_Date = DateTime.Now;
            }

            m_objOtherVehInfo.FK_Liability_Claim = Convert.ToInt32(Session["WorkerCompID"]);
            m_objOtherVehInfo.Owner_Name = txtowner.Text.Trim();
            m_objOtherVehInfo.Owner_Address1 = txtAddLine1.Text.Trim();
            m_objOtherVehInfo.Owner_Address2 = txtAddLine2.Text.Trim();
            m_objOtherVehInfo.Owner_City = txtcity.Text;

            if (dwstateowner.SelectedIndex != 0)
                m_objOtherVehInfo.FK_Owner_State = Convert.ToDecimal(dwstateowner.SelectedValue);
            m_objOtherVehInfo.Owner_Zipcode = txtzipcode.Text.Trim();
            m_objOtherVehInfo.Owner_Telephone = txthomephone.Text.Trim();

            m_objOtherVehInfo.Insurance_Carrier = txtinsuname.Text.Trim();
            m_objOtherVehInfo.Insurance_Telephone = txtInsuTelNo.Text.Trim();
            m_objOtherVehInfo.Insurance_Agent_Name = txtinsuAgentName.Text.Trim();
            m_objOtherVehInfo.Insurance_Agent_Telephone = txtInsuAgentTelNo.Text.Trim();
            m_objOtherVehInfo.Policy_Number = txtpolicyNo.Text.Trim();

            m_objOtherVehInfo.Vehicle_Year = txtyear.Text.Trim();
            m_objOtherVehInfo.Vehicle_Make = txtMake.Text.Trim();
            m_objOtherVehInfo.Vehicle_Model = txtmodel.Text.Trim();
            m_objOtherVehInfo.Vehicle_VIN = txtVIN.Text.Trim();
            m_objOtherVehInfo.Vehicle_Plate_Number = txtLicensePlateNo.Text.Trim();
            if (dwLicensePlateState.SelectedIndex != 0)
                m_objOtherVehInfo.FK_Vehicle_State = Convert.ToDecimal(dwLicensePlateState.SelectedValue);
            m_objOtherVehInfo.Vehicle_Color = txtVehColor.Text.Trim();
            m_objOtherVehInfo.Desc_Damage = txtDescDmgtoCompany.Text.Trim();

            m_intRetval = m_objOtherVehInfo.InsertUpdateility_Claim_OtherVehInfo(m_objOtherVehInfo);
            ViewState["Pk_Id"] = m_intRetval;
            if (m_intRetval >= 0)
            {

            }

        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    #endregion

    #region Attachment

    protected void gvAttachmentDetails_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                ((ImageButton)e.Row.FindControl("imgbtnDwnld")).Attributes.Add("onclick", "javascript:return openWindow('" + m_strGlobalPath + ((ImageButton)e.Row.FindControl("imgbtnDwnld")).CommandArgument.ToString() + "');");
                //((ImageButton)e.Row.FindControl("imgbtnMail")).Attributes.Add("onclick", "javascript:return openMailWindow('../ErimsMail.aspx?AttMod=Worker_Comp_Subrogation_Detail&AttName=" + ((ImageButton)e.Row.FindControl("imgbtnMail")).CommandArgument.ToString() + "');");
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    private void UploadDocuments()
    {
        try
        {
            m_strPath = Server.MapPath(ConfigurationManager.AppSettings["UploadPath"]);

            if (!(Directory.Exists(m_strPath + "\\" + m_strFolderName)))
            {
                Directory.CreateDirectory(m_strPath + "\\" + m_strFolderName);
            }
            m_strFileName = GetCustomFileName() + uplCommon.FileName.ToString();
            m_strPath = m_strPath + "\\" + m_strFolderName + "\\" + m_strFileName;
            uplCommon.SaveAs(m_strPath);

        }
        catch (Exception ex)
        {
            //Log.Append("Error in UploadPhotoImages Method of ConditionAssessment's PhotoGraphs:" + ex.Message);
            //Common.reportError("Error in UploadPhotoImages Method of ConditionAssessment's PhotoGraphs:", ex.Message);
            throw ex;
        }
    }

    private string GetCustomFileName()
    {
        try
        {
            m_strCustomFileName = System.DateTime.Now.ToString("MMddyyhhmmss");
        }
        catch (Exception ex)
        {
            throw ex;
        }
        return m_strCustomFileName;
    }

    private int AddAttachment()
    {
        try
        {
            //InsertUpdateData();
            UploadDocuments();
            m_objAttachment = new RIMS_Base.Biz.CAttachment();
            m_objAttachment.Attachment_Table = "Liability_Claim_OtherVehInfo";
            m_objAttachment.Foreign_Key = Convert.ToInt32(ViewState["Pk_Id"].ToString());
            m_objAttachment.FK_Attachment_Type = 1;
            //Convert.ToInt32(ddlAttachType.SelectedValue);
            m_objAttachment.Attachment_Description = txtAttachDesc.Text.Replace("'", "''");
            m_objAttachment.Attachment_Name = m_strFileName;
            m_objAttachment.Updated_By = Session["UserID"].ToString();
            m_objAttachment.Update_Date = System.DateTime.Now.Date;
            Attach_Retval = m_objAttachment.InsertUpdateAttachment(m_objAttachment);


        }
        catch (Exception ex)
        {
            throw ex;
        }
        return Attach_Retval;
    }
    protected void btnAddAttachment_Click(object sender, EventArgs e)
    {
        InsertUpdateData();
       
        dvAttachDetails.Style["display"] = "block";
        AddAttachment();

       // ddlAttachType.SelectedIndex = 1;
        txtAttachDesc.Text = "";

        if (Attach_Retval > 0)
        {
            gvAttachmentDetails.DataSource = BindAttachmentDetails();
            gvAttachmentDetails.DataBind();

        }
        btnRemove.Visible = true;
        //dispTagName.Value = "divthird";
    }
    private List<RIMS_Base.CAttachment> BindAttachmentDetails()
    {
        try
        {
            m_objAttachment = new RIMS_Base.Biz.CAttachment();
            lstAttachment = new List<RIMS_Base.CAttachment>();
            if (ViewState["Pk_Id"] != null && ViewState["Pk_Id"].ToString() != string.Empty)
                lstAttachment = m_objAttachment.GetAll(0, Convert.ToInt32(ViewState["Pk_Id"].ToString()), "Liability_Claim_OtherVehInfo");
            else
                lstAttachment = m_objAttachment.GetAll(0, 0, "Liability_Claim_OtherVehInfo");

            if (lstAttachment.Count > 0)
            {
                btnRemove.Visible = true;
                btnMail.Visible = true;
                //btnViewMail.Visible = true;
            }
            else
            {
                btnRemove.Visible = false;
                btnMail.Visible = false;
                //btnViewMail.Visible = false;
            }
            return lstAttachment;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {

        }
    }
    protected void btnRemove_Click(object sender, EventArgs e)
    {
        try
        {
            m_objAttachment = new RIMS_Base.Biz.CAttachment();
            Attach_Retval = m_objAttachment.DeleteAttachment(Request.Form["chkItem"].ToString());
            if (Attach_Retval <= 0)
            {

                gvAttachmentDetails.DataSource = BindAttachmentDetails();
                gvAttachmentDetails.DataBind();
                if (lstAttachment.Count > 0)
                    btnRemove.Visible = true;
                else
                    btnRemove.Visible = false;
            }
            dvAttachDetails.Visible = true;

            //dvAttachDetails.Style["display"] = "block";
            //divAttach.Style["display"] = "block";
            //divClaimDetail.Style["display"] = "none";
            //divInsurance.Style["display"] = "none";

            //hdnTagName.Value = "third";
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    #endregion
}
