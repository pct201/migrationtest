using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Collections.Generic;
using System.IO;

public partial class Claim_OtherDriversInfo : System.Web.UI.Page
{

    #region Private Variables
    public RIMS_Base.Biz.CLiabilityClaimOtherDriverInfo m_objOtherDriverInfo;
    public RIMS_Base.Biz.CGeneral objGeneral;
    int m_intRetval = -1;
    List<RIMS_Base.CLiabilityClaimOtherDriverInfo> lstOtherDr;

    public string m_strCustomFileName = string.Empty;
    public string m_strFileName = string.Empty;
    public string m_strGlobalPath = string.Empty;
    public string m_strPath = string.Empty;
    public string m_strFolderName = "OtherDriver";
    public RIMS_Base.Biz.CAttachment m_objAttachment;
    List<RIMS_Base.CAttachment> lstAttachment = null;
    int Attach_Retval = -1;
    RIMS_Base.Biz.CLiabilityClaim_FCI objLiability;
    List<RIMS_Base.CLiabilityClaim_FCI> lstLiability;
  
    #endregion


    protected void Page_Load(object sender, EventArgs e)
    {
        txtZip.Attributes.Add("onKeyUp", "return ZipMasking(event,this.value,this);");
        txtZip.Attributes.Add("onKeyPress", "return CheckNum(this);");

       // txtZip.Attributes.Add("onKeyPress", "isValidzip(this)");
        m_strGlobalPath = Page.ResolveUrl(ConfigurationManager.AppSettings["UploadPath"] + "/" + m_strFolderName + "/");

        if (!IsPostBack)
        {
            BindCombo();

            gvAttachmentDetails.DataSource = BindAttachmentDetails();
            gvAttachmentDetails.DataBind();


            btnRemove.Attributes.Add("onclick", "return OMSCheckSelected1('chkItem','gvAttachmentDetails','Delete');");
           


            if (Request.QueryString.Count > 0)
            {
                if (Request.QueryString["LiabilityID"] != string.Empty)
                {
                    Session["WitnessId"] = Request.QueryString["LiabilityID"].ToString();
                    ViewState["Pk_Id"] = Request.QueryString["LiabilityID"].ToString();
                    RetriveData();
                }
            }


          
        }
    }
    protected void btnCancel_Click(object sender, EventArgs e)
    {
        Response.Redirect("../Claim/AutoLiability.aspx?page=Driver");
    }

    #region Private Methods
    private void BindCombo()
    {
        objGeneral = new RIMS_Base.Biz.CGeneral();
        dwState.DataSource = objGeneral.GetAllState();
        dwState.DataTextField = "FLD_state";
        dwState.DataValueField = "Code";
        dwState.DataBind();
        ListItem lstItem = new ListItem("------------Select------------", "0");
        dwState.Items.Insert(0, lstItem);

        dwLicenseState.DataSource = objGeneral.GetAllState();
        dwLicenseState.DataTextField = "FLD_state";
        dwLicenseState.DataValueField = "Code";
        dwLicenseState.DataBind();
        ListItem lstItemLicenseState = new ListItem("------------Select------------", "0");
        dwLicenseState.Items.Insert(0, lstItemLicenseState);

    }

    private void RetriveData()
    {
        m_objOtherDriverInfo = new RIMS_Base.Biz.CLiabilityClaimOtherDriverInfo();
        lstOtherDr = new List<RIMS_Base.CLiabilityClaimOtherDriverInfo>();
        Int32 LiabilityClaimid = Convert.ToInt32(Session["WitnessId"].ToString());
        lstOtherDr = m_objOtherDriverInfo.Get_Claim_OtherDriverInfoByID(LiabilityClaimid);

        try
        {
            if (lstOtherDr.Count != 0)
            {
                if (lstOtherDr[0].Driver_Name != String.Empty)
                    txtname.Text = lstOtherDr[0].Driver_Name;

                if (lstOtherDr[0].Driver_Address1 != String.Empty)
                    txtAdd1.Text = lstOtherDr[0].Driver_Address1;

                if (lstOtherDr[0].Driver_Address2 != String.Empty)
                    txtAdd2.Text = lstOtherDr[0].Driver_Address2;

                if (lstOtherDr[0].Driver_City != String.Empty)
                    txtCity.Text = lstOtherDr[0].Driver_City;


                if (lstOtherDr[0].FK_Driver_State != null)
                    dwState.SelectedIndex = dwState.Items.IndexOf(dwState.Items.FindByValue(lstOtherDr[0].FK_Driver_State.ToString()));

                if (lstOtherDr[0].Driver_Zipcode != String.Empty)
                    txtZip.Text = lstOtherDr[0].Driver_Zipcode;

                if (lstOtherDr[0].Driver_Telephone != String.Empty)
                    txtTelephone.Text = lstOtherDr[0].Driver_Telephone;

                if (lstOtherDr[0].Driver_License_Number != String.Empty)
                    txtLicenseNo.Text = lstOtherDr[0].Driver_License_Number;

                if (lstOtherDr[0].Driver_License_Number != String.Empty)
                    txtLicenseNo.Text = lstOtherDr[0].Driver_License_Number;

                if (lstOtherDr[0].FK_Driver_License_State != null)
                    dwLicenseState.SelectedIndex = dwLicenseState.Items.IndexOf(dwLicenseState.Items.FindByValue(lstOtherDr[0].FK_Driver_License_State.ToString()));

                if (lstOtherDr[0].Insurance_Carrier != String.Empty)
                    txtCarrier.Text = lstOtherDr[0].Insurance_Carrier;

                if (lstOtherDr[0].Insurance_Telephone != String.Empty)
                    txtInsuranceTeleNo.Text = lstOtherDr[0].Insurance_Telephone;

                if (lstOtherDr[0].Insurance_Agent_Name != String.Empty)
                    txtAgentName.Text = lstOtherDr[0].Insurance_Agent_Name;

                if (lstOtherDr[0].Insurance_Agent_Telephone != String.Empty)
                    txtAgentTeleNo.Text = lstOtherDr[0].Insurance_Agent_Telephone;

                if (lstOtherDr[0].Policy_number != String.Empty)
                    txtPolicyNo.Text = lstOtherDr[0].Policy_number;


                lstAttachment = BindAttachmentDetails();
                if (lstAttachment.Count > 0)
                {
                    gvAttachmentDetails.DataSource = lstAttachment;
                    gvAttachmentDetails.DataBind();
                    //dispTagName.Value = "dvAttachDetails";
                    btnRemove.Visible = true;
                    btnMail.Visible = true;
                    dvAttachDetails.Style["display"] = "block";
                }


            }
          

        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    private void InsertUpdateData()
    {
        try
        {
            m_objOtherDriverInfo = new RIMS_Base.Biz.CLiabilityClaimOtherDriverInfo();

            if (ViewState["Pk_Id"] != null && ViewState["Pk_Id"].ToString() != String.Empty)
            {
                m_objOtherDriverInfo.PK_Otherdriver = Convert.ToInt32(ViewState["Pk_Id"].ToString());
               // m_objOtherDriverInfo.Updated_By = Session["UserID"].ToString();
                m_objOtherDriverInfo.Updated_Date = DateTime.Now;
            }

            m_objOtherDriverInfo.FK_Liability_Claim = Convert.ToInt32(Session["WorkerCompID"]);
           
            m_objOtherDriverInfo.Driver_Name = txtname.Text.Trim();
            m_objOtherDriverInfo.Driver_Address1 = txtAdd1.Text.Trim();
            m_objOtherDriverInfo.Driver_Address2 = txtAdd2.Text.Trim();
            m_objOtherDriverInfo.Driver_City = txtCity.Text.Trim();
            if (dwState.SelectedIndex != 0)
                m_objOtherDriverInfo.FK_Driver_State = Convert.ToDecimal(dwState.SelectedValue);
            m_objOtherDriverInfo.Driver_Zipcode = txtZip.Text;
            m_objOtherDriverInfo.Driver_Telephone = txtTelephone.Text;
            m_objOtherDriverInfo.Driver_License_Number = txtLicenseNo.Text.Trim();
            if (dwLicenseState.SelectedIndex != 0)
                m_objOtherDriverInfo.FK_Driver_License_State = Convert.ToDecimal(dwLicenseState.SelectedValue);

            m_objOtherDriverInfo.Insurance_Carrier = txtCarrier.Text.Trim();
            m_objOtherDriverInfo.Insurance_Telephone = txtInsuranceTeleNo.Text.Trim();
            m_objOtherDriverInfo.Insurance_Agent_Name = txtAgentName.Text.Trim();
            m_objOtherDriverInfo.Insurance_Agent_Telephone = txtAgentTeleNo.Text.Trim();
            m_objOtherDriverInfo.Policy_number = txtPolicyNo.Text.Trim();

            m_intRetval = m_objOtherDriverInfo.InsertUpdateility_Claim_OtherDriverInfo(m_objOtherDriverInfo);
            ViewState["Pk_Id"] = m_intRetval;


        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    #endregion

    #region Attachment

    protected void gvAttachmentDetails_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                ((ImageButton)e.Row.FindControl("imgbtnDwnld")).Attributes.Add("onclick", "javascript:return openWindow('" + m_strGlobalPath + ((ImageButton)e.Row.FindControl("imgbtnDwnld")).CommandArgument.ToString() + "');");
                //((ImageButton)e.Row.FindControl("imgbtnMail")).Attributes.Add("onclick", "javascript:return openMailWindow('../ErimsMail.aspx?AttMod=Worker_Comp_Subrogation_Detail&AttName=" + ((ImageButton)e.Row.FindControl("imgbtnMail")).CommandArgument.ToString() + "');");
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    private void UploadDocuments()
    {
        try
        {
            m_strPath = Server.MapPath(ConfigurationManager.AppSettings["UploadPath"]);

            if (!(Directory.Exists(m_strPath + "\\" + m_strFolderName)))
            {
                Directory.CreateDirectory(m_strPath + "\\" + m_strFolderName);
            }
            m_strFileName = GetCustomFileName() + uplCommon.FileName.ToString();
            m_strPath = m_strPath + "\\" + m_strFolderName + "\\" + m_strFileName;
            uplCommon.SaveAs(m_strPath);

        }
        catch (Exception ex)
        {
            //Log.Append("Error in UploadPhotoImages Method of ConditionAssessment's PhotoGraphs:" + ex.Message);
            //Common.reportError("Error in UploadPhotoImages Method of ConditionAssessment's PhotoGraphs:", ex.Message);
            throw ex;
        }
    }

    private string GetCustomFileName()
    {
        try
        {
            m_strCustomFileName = System.DateTime.Now.ToString("MMddyyhhmmss");
        }
        catch (Exception ex)
        {
            throw ex;
        }
        return m_strCustomFileName;
    }

    private int AddAttachment()
    {
        try
        {
            //InsertUpdateData();
            UploadDocuments();
            m_objAttachment = new RIMS_Base.Biz.CAttachment();
            m_objAttachment.Attachment_Table = "Liability_Claim_OtherDriverInfo";
            m_objAttachment.Foreign_Key = Convert.ToInt32(ViewState["Pk_Id"].ToString());
            m_objAttachment.FK_Attachment_Type = 1;
                //Convert.ToInt32(ddlAttachType.SelectedValue);
            m_objAttachment.Attachment_Description = txtAttachDesc.Text.Replace("'", "''");
            m_objAttachment.Attachment_Name = m_strFileName;
            m_objAttachment.Updated_By = Session["UserID"].ToString();
            m_objAttachment.Update_Date = System.DateTime.Now.Date;
            Attach_Retval = m_objAttachment.InsertUpdateAttachment(m_objAttachment);


        }
        catch (Exception ex)
        {
            throw ex;
        }
        return Attach_Retval;
    }
    protected void btnAddAttachment_Click(object sender, EventArgs e)
    {
        InsertUpdateData();
        //dvAttachDetails.Style["display"] = "block";
        //divAttachmen.Style["display"] = "block";
        //divClaimDetail.Style["display"] = "none";
        //divInsurance.Style["display"] = "none";

        //hdnTagName.Value = "third";
        dvAttachDetails.Style["display"] = "block";
        AddAttachment();

        ddlAttachType.SelectedIndex = 1;
        txtAttachDesc.Text = "";

        if (Attach_Retval > 0)
        {
            gvAttachmentDetails.DataSource = BindAttachmentDetails();
            gvAttachmentDetails.DataBind();

        }
        btnRemove.Visible = true;
        //dispTagName.Value = "divthird";
    }
    private List<RIMS_Base.CAttachment> BindAttachmentDetails()
    {
        try
        {
            m_objAttachment = new RIMS_Base.Biz.CAttachment();
            lstAttachment = new List<RIMS_Base.CAttachment>();
            if (ViewState["Pk_Id"] != null && ViewState["Pk_Id"].ToString() != string.Empty)
                lstAttachment = m_objAttachment.GetAll(0, Convert.ToInt32(ViewState["Pk_Id"].ToString()), "Liability_Claim_OtherDriverInfo");
            else
                lstAttachment = m_objAttachment.GetAll(0, 0, "Liability_Claim_OtherDriverInfo");

            if (lstAttachment.Count > 0)
            {
                btnRemove.Visible = true;
                btnMail.Visible = true;
                //btnViewMail.Visible = true;
            }
            else
            {
                btnRemove.Visible = false;
                btnMail.Visible = false;
                //btnViewMail.Visible = false;
            }
            return lstAttachment;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {

        }
    }
    protected void btnRemove_Click(object sender, EventArgs e)
    {
        try
        {
            m_objAttachment = new RIMS_Base.Biz.CAttachment();
            Attach_Retval = m_objAttachment.DeleteAttachment(Request.Form["chkItem"].ToString());
            if (Attach_Retval <= 0)
            {

                gvAttachmentDetails.DataSource = BindAttachmentDetails();
                gvAttachmentDetails.DataBind();
                if (lstAttachment.Count > 0)
                    btnRemove.Visible = true;
                else
                    btnRemove.Visible = false;
            }
            dvAttachDetails.Visible = true;

            //dvAttachDetails.Style["display"] = "block";
            //divAttach.Style["display"] = "block";
            //divClaimDetail.Style["display"] = "none";
            //divInsurance.Style["display"] = "none";

            //hdnTagName.Value = "third";
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    #endregion



    protected void btnsave_Click(object sender, EventArgs e)
    {
        InsertUpdateData();
        Response.Redirect("../Claim/AutoLiability.aspx?page=Driver");
    }
}
